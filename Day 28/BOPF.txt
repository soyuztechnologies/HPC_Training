@AbapCatalog.sqlViewName: 'ZHPCXXCDSBOPF'
@AbapCatalog.compiler.compareFilter: true
@AbapCatalog.preserveKey: true
@AccessControl.authorizationCheck: #CHECK
@EndUserText.label: 'CDS BOPF for transactional fiori app'
@VDM.viewType: #CONSUMPTION
@OData.publish: true
@UI.headerInfo:{
    typeName: 'Travel',
    typeNamePlural: 'Travels',
    imageUrl: 'https://www.haldiapetrochemicals.com/img/logo.png',
    title: { label: 'Carrier' , value: 'Carrid' },
    description: { value: 'Connid'}
}
@ObjectModel:{
    modelCategory: #BUSINESS_OBJECT,
    compositionRoot: true,
    writeActivePersistence: 'ZOFT_MEALS',
    transactionalProcessingEnabled: true,
    createEnabled: true,
    updateEnabled: true,
    deleteEnabled: true
}

define view ZHPC_XX_CDS_BOPF as select from zoft_meals as oft 
association[1] to scarr as _Airline on
oft.carrid = _Airline.carrid
association[1] to spfli as _Flights on
oft.carrid = _Flights.carrid and oft.connid = _Flights.connid
association[1] to smeal as _Meals on
oft.meal = _Meals.mealnumber and oft.carrid = _Meals.carrid
{
    @UI.facet: [{
        type: #COLLECTION,
        id: 'collection',
        purpose: #STANDARD,
        label: 'More Info'
     },{
        type: #IDENTIFICATION_REFERENCE,
        purpose: #STANDARD,
        label: 'More Info',
        parentId: 'collection',
        position: 1
     },{
        type: #FIELDGROUP_REFERENCE,
        purpose: #STANDARD,
        label: 'Additional Fields',
        parentId: 'collection',
        id: 'fg1',
        position: 2
     }]
    key meal_id as Meal_Id,
    @UI.selectionField: [{position: 1 }]
    @UI.lineItem: [{position: 1 }]
    @UI.identification: [{position: 1 }]
    carrid as Carrid,
    @UI.selectionField: [{position: 2 }]
    @UI.lineItem: [{position: 2 }]
    @UI.identification: [{position: 2 }]
    connid as Connid,
    @UI.lineItem: [{position: 3 }]
    @UI.fieldGroup: [{position: 1, targetElement: 'fg1' }]
    meal as Meal,
    @UI.fieldGroup: [{position: 2, targetElement: 'fg1' }]
    @UI.lineItem: [{position: 4 }]
    @ObjectModel.readOnly: true
    total_seats as Total_Seats,
    @UI.fieldGroup: [{position: 3, targetElement: 'fg1' }]
    @UI.lineItem: [{position: 5 }]
    status as Status,
    _Airline,
    _Flights,
    _Meals
}



------------------------
class ZCL_HPC_V_HPC_VALIDATE definition
  public
  inheriting from /BOBF/CL_LIB_V_SUPERCL_SIMPLE
  final
  create public .

public section.

  methods /BOBF/IF_FRW_VALIDATION~EXECUTE
    redefinition .
protected section.
private section.
ENDCLASS.



CLASS ZCL_HPC_V_HPC_VALIDATE IMPLEMENTATION.
  method /BOBF/IF_FRW_VALIDATION~EXECUTE.

       data : lt_data type ZTHPC_XX_CDS_BOPF.

       "Read data from the screen which was given to BOPF framework
       "Every transaction in BOPF has a node key

       io_read->retrieve(
         EXPORTING
           iv_node                 = is_ctx-node_key
           it_key                  = it_key
         IMPORTING
            et_data                 = lt_data
       ).

       "always one record which we get
       read table lt_data into data(wa) index 1.

       "Select data from table to check if airline code is valid
       select single 'X' into @data(lv_exist) from scarr where carrid = @wa-carrid.

       if lv_exist = abap_false.

        "Throw exception so BOPF can terminate the transaction
        if eo_message is initial.
            eo_message = /bobf/cl_frw_factory=>get_message(  ).
            eo_message->add_message(
              EXPORTING
                is_msg       = value #( msgid = 'SY' msgno = '002' msgv1 = |Carrid { wa-carrid } is not valid Amigo!!| )
                iv_node      = is_ctx-node_key
                iv_key       = wa-key
                iv_attribute = ZIF_HPC_XX_CDS_BOPF_C=>sc_node_attribute-zhpc_xx_cds_bopf-carrid
                iv_lifetime  = /bobf/cm_frw=>co_lifetime_transition
            ).

            append value #( key = is_ctx-node_key ) to et_failed_key.
        endif.

       endif.

  endmethod.
ENDCLASS.


"! This interface is used by implemented validations
"! <p>It contains the method <strong>EXECUTE</strong> to implement the checking logic that is invoked by BOPF as soon as it is requested to check the node instance consistency.
"! If the execution of the validation shall only happen for instances having a certain attribute changed, the method <strong>CHECK_DELTA</strong> should be implemented.
"! If the validation execution is depending on other conditions, the method <strong>CHECK</strong> should be implemented.</p>
INTERFACE /bobf/if_frw_validation
  PUBLIC .

  "! This optional method allows to reduce the amount of node instances that will be processed by the validation due to performance reasons.
  "! Thereto it can be implemented to check if the node attributes, that are relevant for triggering the validation logic, have been changed at all.
  "! If not, the key of the corresponding node instance has to be removed from <strong>CT_KEY</strong>. This avoids that this instance is later on processed in the validation's <strong>EXECUTE</strong> method.
  "! <p><strong>Note: The <strong>CHECK_DELTA</strong> method is only relevant for consistency validations and not executed in case of an action validation.</strong></p>
  "! @parameter IS_CTX                          | Provides validation execution context information
  "! @parameter IO_READ                         | Object that provides reading access to the instances of the business object
  "! @parameter CT_KEY                          | List of node instances that will be processed by the validation in the <strong>EXECUTE</strong> method later on.
  "! Can be reduced by the instances for which no validation is required as no check relevant node attributes are changed.
  "! @raising   /BOBF/CX_FRW                    | Exception
  METHODS check_delta DEFAULT IGNORE
    IMPORTING
      !is_ctx  TYPE /bobf/s_frw_ctx_val
      !io_read TYPE REF TO /bobf/if_frw_read
    CHANGING
      !ct_key  TYPE /bobf/t_frw_key
    RAISING
      /bobf/cx_frw .

  "! This optional method allows to reduce the amount of node instances that will be processed by the validation due to performance reasons.
  "! Thereto it can be implemented to check whether the node instance attributes have values that require the execution of the validation.
  "! If not, the key of the corresponding node instance has to be removed from <strong>CT_KEY</strong>. This avoids that this instance is later on processed in the validation's <strong>EXECUTE</strong> method.
  "! @parameter IS_CTX                          | Provides validation execution context information
  "! @parameter IO_READ                         | Object that provides reading access to the instances of the business object
  "! @parameter CT_KEY                          | List of node instances that will be processed by the validation in the <strong>EXECUTE</strong> method later on.
  "! Can be reduced by the instances for which no validation is required as the node attributes have no check relevant values.
  "! @raising   /BOBF/CX_FRW                    | Exception
  METHODS check DEFAULT IGNORE
    IMPORTING
      !is_ctx  TYPE /bobf/s_frw_ctx_val
      !io_read TYPE REF TO /bobf/if_frw_read
    CHANGING
      !ct_key  TYPE /bobf/t_frw_key
    RAISING
      /bobf/cx_frw .

  "! This method executes the validation logic
  "! <p>This mandatory method implements the main validation logic. It does not provide any modifying access to the nodes instance data but returns the messages and the keys of failed node instances.
  "! </p>
  "! @parameter IS_CTX                          | Provides validation execution context information. (If Smart Validations are enabled for the BO, IS_CTX-VAL_TIME is always initial.)
  "! @parameter IT_KEY                          | Set of node instance keys that should be processed by the validation
  "! @parameter IO_READ                         | Provides read access to the data of the business object instances
  "! @parameter EO_MESSAGE                      | Message object used for returning information, or warning or error messages related to the validation
  "! @parameter ET_FAILED_KEY                   | Set of node instance keys (subset of <strong>IT_KEY</strong>) that do not match the validation criteria. The framework's behavior depends on the kind of validation returning the failed keys:
  "! <ul><li>Action Validation: The action to which the action validation is assigned won't be executed for the instances that are part of <strong>ET_FAILED_KEY</strong></li>
  "! <li>Consistency Validation assigned to a save preventing consistency group: The save of the transaction will be prevented in case that <strong>ET_FAILED_KEY</strong> is not initial</li>
  "! <li>Consistency Validation assigned to a status calculating consistency group: The status will be set to "inconsistent" for all instances that are part of <strong>ET_FAILED_KEY</strong></li>
  "! </ul>
  "! @raising   /BOBF/CX_FRW                    | Exception
  METHODS execute
    IMPORTING
      !is_ctx        TYPE /bobf/s_frw_ctx_val
      !it_key        TYPE /bobf/t_frw_key
      !io_read       TYPE REF TO /bobf/if_frw_read
*      !io_conf       TYPE REF TO /bobf/if_frw_configuration OPTIONAL
    EXPORTING
      !eo_message    TYPE REF TO /bobf/if_frw_message
      !et_failed_key TYPE /bobf/t_frw_key
    RAISING
      /bobf/cx_frw .

ENDINTERFACE.


class ZCL_HPC_D_CALC_SEATS definition
  public
  inheriting from /BOBF/CL_LIB_D_SUPERCL_SIMPLE
  final
  create public .

public section.

  methods /BOBF/IF_FRW_DETERMINATION~EXECUTE
    redefinition .
protected section.
private section.
ENDCLASS.



CLASS ZCL_HPC_D_CALC_SEATS IMPLEMENTATION.
  method /BOBF/IF_FRW_DETERMINATION~EXECUTE.


       data : lt_data type ZTHPC_XX_CDS_BOPF.

       "Read data from the screen which was given to BOPF framework
       "Every transaction in BOPF has a node key

       io_read->retrieve(
         EXPORTING
           iv_node                 = is_ctx-node_key
           it_key                  = it_key
         IMPORTING
            et_data                 = lt_data
       ).

       "always one record which we get
       read table lt_data reference into data(lo_wa) index 1.

       "Select data from table to check if airline code is valid
       select single seatsmax_b + seatsmax_f into @lo_wa->total_seats from sflight
       where carrid = @lo_wa->carrid and connid = @lo_wa->connid.

       "update bopf that value needs to be changed
       io_modify->update(
         EXPORTING
           iv_node           = is_ctx-node_key
           iv_key            = lo_wa->key
           is_data           =  lo_wa
           it_changed_fields = value #( ( ZIF_HPC_XX_CDS_BOPF_C=>sc_node_attribute-zhpc_xx_cds_bopf-total_seats ) )
       ).



  endmethod.
ENDCLASS.

